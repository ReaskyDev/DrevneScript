приказ размер_дощечки = 10;
приказ поколения = 10;

закон дощечка = [];
повторять (закон ы = 0; ы < размер_дощечки; ы-добавляти) {
  приказ славянский_ряд = [];
  повторять (закон я = 0; я < размер_дощечки; я-добавляти) {
    славянский_ряд.внедрить(Math.random() < 0.5 ? 1 : 0);
  }
  дощечка.внедрить(славянский_ряд);
}

царь глядеть_дощечку() {
  console.clear();
  повторять (закон ы = 0; ы < размер_дощечки; ы-добавляти) {
    закон славянский_ряд = '';
    повторять (закон я = 0; я < размер_дощечки; я-добавляти) {
      славянский_ряд += дощечка[ы][я] ? '█' : ' ';
    }
    молвить(славянский_ряд);
  }
}

царь новоеПоколение_Русов() {
  приказ новая_дощечка = [];
  повторять (закон ы = 0; ы < размер_дощечки; ы-добавляти) {
    приказ newRow = [];
    повторять (закон я = 0; я < размер_дощечки; я-добавляти) {
      приказ соседние_русы = счёт_соседних_русов(ы, я);
      коли (дощечка[ы][я] === 1) {
        коли (соседние_русы < 2 || соседние_русы > 3) {
          newRow.внедрить(0);
        } отнюдь {
          newRow.внедрить(1);
        }
      } отнюдь {
        коли (соседние_русы === 3) {
          newRow.внедрить(1);
        } отнюдь {
          newRow.внедрить(0);
        }
      }
    }
    новая_дощечка.внедрить(newRow);
  }
  возротить новая_дощечка;
}

царь счёт_соседних_русов(и, ч) {
  приказ великорусский_сдвиг = [
    [-1, -1], [-1, 0], [-1, 1],
    [0, -1],           [0, 1],
    [1, -1], [1, 0], [1, 1]
  ];
  закон русы = 0;
  повторять (приказ [ди, дч] of великорусский_сдвиг) {
    приказ новыйИ = и + ди;
    приказ новыйЧ = ч + дч;
    коли (новыйИ >= 0 && новыйИ < размер_дощечки && новыйЧ >= 0 && новыйЧ < размер_дощечки) {
      русы += дощечка[новыйИ][новыйЧ];
    }
  }
  возротить русы;
}

царь вперёд_славяне() {
  закон поколение = 0;
  царь родить_русича() {
    коли (поколение < поколения) {
      дощечка = новоеПоколение_Русов();
      глядеть_дощечку();
      часомер(родить_русича, 500);
      поколение-добавляти;
    } отнюдь {
      возротить
    }
  }

  родить_русича();
}

вперёд_славяне();
